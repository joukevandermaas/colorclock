@page "/"
@using Q42.HueApi
@using System.Threading

<div class="flex items-center justify-center w-screen h-screen">
    <div class="grid grid-cols-2 gap-2 w-full h-full p-2">
        @foreach (var (label, _) in _times)
        {
            var isSelected = _selectedTime == label;
            var isAnyRunning = IsRunning;

            <button
                class='@(isSelected ? "bg-pink-500 text-white" : (isAnyRunning ? "bg-pink-100 text-pink-300" : "bg-pink-200 text-pink-800")) rounded uppercase text-4xl tracking-wide transition-colors hover:bg-pink-500 hover:text-white focus:outline-none focus:ring focus:ring-inset focus:ring-pink-500'
                @onclick=@(async (e) => await SelectTimeAsync(label))
            >
                @label
            </button>
        }
    </div>
</div>

@code
{
    private (string, TimeSpan)[] _times = new[]
    {
        ("30s", TimeSpan.FromSeconds(30)),
        ("2m", TimeSpan.FromMinutes(2)),
        ("10m", TimeSpan.FromMinutes(10)),
        ("30m", TimeSpan.FromMinutes(30)),
        ("1h", TimeSpan.FromHours(1)),
        ("2h", TimeSpan.FromHours(2)),
    };

    private string _selectedTime = null;
    private CancellationTokenSource _cancel = null;

    private bool IsRunning => _cancel != null;

    private void CancelTimer(MouseEventArgs args) {}

    private async Task SelectTimeAsync(string newTime)
    {
        _selectedTime = newTime;

        if (IsRunning)
        {
            _cancel.Cancel();
        }

        _cancel = new CancellationTokenSource();
        TimeSpan timerDuration = default;

        foreach (var (label, time) in _times)
        {
            if (_selectedTime == label)
            {
                timerDuration = time;
                break;
            }
        }

        if (timerDuration == default)
        {
            return;
        }

        await DoClock(timerDuration, _cancel.Token, "20", "21");
        
        _selectedTime = null;
        _cancel = null;
    }

    async Task DoClock(TimeSpan time, CancellationToken cancellationToken, params string[] lightIds)
    {
        var client = new LocalHueClient("192.168.178.10");
        client.Initialize("t2enGIRzvDs-RPwDwjHvKlTo3cubMbwCfg6sNvND");

        var light = await client.GetLightAsync(lightIds[0]);
        var savedBrightness = light.State.Brightness;
        var savedHue = light.State.Hue;
        var savedSaturation = light.State.Saturation;

        const ushort red = 65186;
        const ushort yellow = 6790;
        const ushort green = 21001;

        var halfTime = time / 2;
        var tenPercentTime = time / 10;

        var command = new LightCommand()
        {
            On = true,
            Brightness = savedBrightness,
            Saturation = 0xff,
            TransitionTime = TimeSpan.FromSeconds(1)
        };

        cancellationToken.ThrowIfCancellationRequested();
        command.Hue = green;
        await client.SendCommandAsync(command, lightIds);

        await Task.Delay(time / 2);

        cancellationToken.ThrowIfCancellationRequested();
        command.Hue = yellow;
        await client.SendCommandAsync(command, lightIds);

        await Task.Delay(halfTime - tenPercentTime);

        cancellationToken.ThrowIfCancellationRequested();
        command.Hue = red;
        await client.SendCommandAsync(command, lightIds);

        await Task.Delay(tenPercentTime);

        cancellationToken.ThrowIfCancellationRequested();
        command.Alert = Alert.Multiple;
        await client.SendCommandAsync(command, lightIds);
        
        // restore to normal when flashing is done
        await Task.Delay(TimeSpan.FromSeconds(10));

        cancellationToken.ThrowIfCancellationRequested();
        command.Hue = savedHue;
        command.Saturation = savedSaturation;
        command.Alert = Alert.None;
        await client.SendCommandAsync(command, lightIds);
    }

}
