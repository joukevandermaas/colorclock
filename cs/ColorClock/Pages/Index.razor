@page "/"
@using Blazored.LocalStorage;

@inject HueService Hue
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

@implements IAsyncDisposable

<div class="flex flex-col items-stretch w-screen h-screen gap-y-2 p-2">
    @if (Hue.HasLightsConfigured)
    {
        <div class="grid grid-cols-2 gap-2 flex-1">
            @foreach (var (label, _) in _times)
            {
                <button class='@(_selectedTime == label ? "bg-pink-500 text-white" : (_selectedTime != null ? "bg-pink-100 text-pink-300" : "bg-pink-200 text-pink-800")) rounded uppercase text-4xl tracking-wide transition-colors hover:bg-pink-500 hover:text-white focus:outline-none focus:ring focus:ring-inset focus:ring-pink-500'
                        @onclick=@(async (e) => await SelectTimeAsync(label))>
                    @label
                </button>
            }
        </div>
    }
    <div class="flex items-stretch h-12">
        <a href="/settings"
           class="flex-1 flex items-center justify-center rounded border-2 border-gray-300 text-gray-600 hover:bg-gray-300 hover:text-gray-800 focus:outline-none focus:ring focus:ring-gray-300">
            settings
        </a>
    </div>
</div>

@code
{
    // this should probably be a dictionary eventually
    // but since there are so few items (< 10) it doesn't
    // matter that much for now.
    private (string, TimeSpan)[] _times = new[]
    {
        ("5s", TimeSpan.FromSeconds(5)),
        ("10s", TimeSpan.FromSeconds(10)),
        ("30s", TimeSpan.FromSeconds(30)),
        ("5m", TimeSpan.FromMinutes(5)),
        ("10m", TimeSpan.FromMinutes(10)),
        ("30m", TimeSpan.FromMinutes(30)),
        ("1h", TimeSpan.FromHours(1)),
        ("2h", TimeSpan.FromHours(2)),
    };

    private string _selectedTime = null;
    private object _interval = null;
    private bool _justStarted = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var obj = DotNetObjectReference.Create(this);
        _interval = await JSRuntime.InvokeAsync<object>("createInterval", new object[] { obj, nameof(OnIntervalTickAsync), 1000 });

        await OnIntervalTickAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("clearInterval", _interval);
    }

    [JSInvokable]
    public async Task OnIntervalTickAsync()
    {
        // this runs every second, we check if there's a timer running
        // and if so, we highlight the correct button.

        var oldTimer = _selectedTime;
        var newTimer = await Hue.GetRunningTimerAsync();

        // see below, this is a work-around to prevent the ui
        // from flashing
        if (_justStarted && newTimer == null)
        {
            return;
        }

        if (oldTimer != newTimer)
        {
            _selectedTime = newTimer;
            StateHasChanged();
        }
    }

    private async Task SelectTimeAsync(string newTime)
    {
        _selectedTime = newTime;

        // we need to set this because the update function may
        // be called before the schedule has been registered in the
        // hub, and that would make the ui flash.
        _justStarted = true;

        // this is not super efficient but we only have < 10 timers
        // so it's fast enough for now :)
        TimeSpan timerDuration = default;
        foreach (var (label, time) in _times)
        {
            if (newTime == label)
            {
                timerDuration = time;
                break;
            }
        }

        if (timerDuration == default)
        {
            return;
        }

        await Hue.StartTimerAsync(_selectedTime, timerDuration);

        // at this point we know that the schedules are there on the
        // hub, so we no longer need to force the selected state
        _justStarted = false;
    }

}
